global:
  scrape_interval: 15s
  evaluation_interval: 15s

istio-ingress-gateway:
  alertmanager:
    host: ((alertmanager_hostname))
  grafana:
    host: ((grafana_hostname))
  prometheus:
    host: ((prometheus_hostname))

alertmanager:
  alertmanagerSpec:
    replicas: 1
    portName: http-service
    externalUrl: ((alertmanager_url))
    logLevel: debug
  config:
    route:
      group_by: [job, alertname]
      # How long to wait to buffer alerts of the same group before sending initially
      group_wait: 30s
      # How long to wait before sending an alert that has been added to a group which contains already fired alerts
      group_interval: 5m
      # How long to wait before re-sending a given alert that has already been sent
      repeat_interval: 4h
      receiver: am-webhook
      routes:
      - match:
          alertname: Watchdog
        receiver: 'null'
      - match:
          alertname: TestAlert
        receiver: am-webhook
    receivers:
    - name: 'null'
    - name: am-webhook
      webhook_configs:
      - url: http://alert-webhook.monitoring/webhook
        send_resolved: true

kubeApiServer:
  serviceMonitor:
    interval: 30s
    metricRelabelings:
    - action: drop
      regex: etcd_(debugging|disk|request|server).*
      sourceLabels:
      - __name__
    - action: drop
      regex: apiserver_admission_controller_admission_latencies_seconds_.*
      sourceLabels:
      - __name__
    - action: drop
      regex: apiserver_admission_step_admission_latencies_seconds_.*
      sourceLabels:
      - __name__

kubeControllerManager:
  endpoints: ((endpoints))
  serviceMonitor:
    interval: 30s
    insecureSkipVerify: true
    metricRelabelings:
    - action: drop
      regex: etcd_(debugging|disk|request|server).*
      sourceLabels:
      - __name__

kubeScheduler:
  endpoints: ((endpoints))
  serviceMonitor:
    interval: 30s
    insecureSkipVerify: true
